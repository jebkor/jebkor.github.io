<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-05-02T23:16:26+02:00</updated><id>/</id><title type="html">jebkor_</title><subtitle>Ramblings of a web-developer from Denmark</subtitle><entry><title type="html">Journey to use NPM in your projects. Part Two - Installing, managing and updating packages</title><link href="/2017/12/10/journey-to-use-npm-part-two.html" rel="alternate" type="text/html" title="Journey to use NPM in your projects. Part Two - Installing, managing and updating packages" /><published>2017-12-10T00:00:00+01:00</published><updated>2017-12-10T00:00:00+01:00</updated><id>/2017/12/10/journey-to-use-npm-part-two</id><content type="html" xml:base="/2017/12/10/journey-to-use-npm-part-two.html">&lt;p&gt;Welcome back. I hope you gained a little bit of insight from my last blog post.
I thought it would be a great place to start for people to either brush up on old knowledge or gain new knowledge.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-happened-last&quot;&gt;What happened last?&lt;/h1&gt;
&lt;p&gt;Hopefully I explained myself properly in my last post, but last time we went over the process of installing everything, both Node.js and NPM, and started to show some VERY basic examples of how to use NPM correctly.&lt;/p&gt;

&lt;p&gt;Before we go in to build-systems and bundlers, I would like to take this time, to explain some of the many &lt;strong&gt;flags&lt;/strong&gt; that you can use with NPM.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;erhm-flags&quot;&gt;Erhm… Flags?&lt;/h1&gt;
&lt;p&gt;Yup, flags. I know, confusing. When you are installing packages, you are more than likely to come across this command:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm install bootstrap –save-dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;What I want to focus on with this post, is the &lt;strong&gt;–save-dev&lt;/strong&gt; part of the command. That is called a flag; A kind of parameter to the command that, in this case, chooses how to install the package.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;okay-flags-how-many-are-there-then&quot;&gt;Okay, flags. How many are there then?&lt;/h1&gt;
&lt;p&gt;Almost as many as there are countries in the world. Well, maybe not as many, but there are a lot of flags.&lt;/p&gt;

&lt;p&gt;Here is a small list of some of the most important and used flags:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;–save&lt;/li&gt;
  &lt;li&gt;–save-dev&lt;/li&gt;
  &lt;li&gt;-D&lt;/li&gt;
  &lt;li&gt;-global&lt;/li&gt;
  &lt;li&gt;-g&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the most commonly used flags when installing packages with NPM, and below here, I will go into some detail on what they mean, how to use them, and why you should care. Here we goooo…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;knowledge-comes-with-a-price&quot;&gt;Knowledge comes with a price…&lt;/h1&gt;
&lt;p&gt;… and that price is confusion. Any new developer working with NPM will get confused about two sections in the package.json file: The &lt;strong&gt;“dependencies”&lt;/strong&gt; section and the &lt;strong&gt;“devDependencies”&lt;/strong&gt; section. These sections determines if the application you are developing is dependant on the package to run, or if it’s &lt;em&gt;just&lt;/em&gt; a library that gets compiled. A rule of thumb:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;if it’s a compiler, transpiler or some other application-running package, install it with –save-dev or -D flag. Otherwise use –save or nothing&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using &lt;strong&gt;”–save-dev”&lt;/strong&gt; will make the package appear in the &lt;strong&gt;“devDependencies”&lt;/strong&gt; section, and using &lt;strong&gt;”–save”&lt;/strong&gt; will make the package appear in the &lt;strong&gt;“dependencies”&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;This section is for all the packages you have installed, that is used in your application, and are not necessary for the app to run; Bootstrap, Moment.js or lodash would appear here, because they are libraries to be used in your application. As long as the package isn’t a compiler or transpiler, this is where they should go.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;devdependencies&quot;&gt;DevDependencies&lt;/h2&gt;
&lt;p&gt;This section is the opposite of &lt;strong&gt;dependencies&lt;/strong&gt;. This is where the packages that are needed for the application to run, is installed. Such packages includes, but are not limited to Gulp and Webpack, because they are needed to compile the code, for it to run in the browser. Installing with the &lt;strong&gt;”–save-dev”&lt;/strong&gt; or &lt;strong&gt;“-D”&lt;/strong&gt; flag, will install the packages under &lt;strong&gt;“devDependencies”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;okay-i-get-it-now-but-could-i-get-more-info-please&quot;&gt;Okay, I get it now… But could I get more info, please?&lt;/h1&gt;
&lt;p&gt;I have briefly mentioned some of the flags in the previous section, but I will try and list them all for you here, now.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;save-or-nothing&quot;&gt;–save or nothing&lt;/h2&gt;
&lt;p&gt;These flags will make the package appear in the &lt;strong&gt;“dependencies”&lt;/strong&gt; section, and be installed as a package, that is just used inside of your application.
Before NPM v.5.5.0, you &lt;strong&gt;had&lt;/strong&gt; to specify the &lt;strong&gt;–save&lt;/strong&gt; flag, for the package to appear in the &lt;strong&gt;“dependencies”&lt;/strong&gt; section, but now, if you leave out any flag, it will by default, behind the scenes, use the &lt;strong&gt;”–save”&lt;/strong&gt; flag, without you having to do anything. Neat.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;save-dev-or--d&quot;&gt;–save-dev or -D&lt;/h2&gt;
&lt;p&gt;These flags will make the package appear in the &lt;strong&gt;“devDependencies”&lt;/strong&gt; section, and be installed as a package, that is required for your application to run, for example, Webpack or Gulp.js.&lt;/p&gt;

&lt;p&gt;A relatively new flag can be used instead; &lt;strong&gt;“-D”&lt;/strong&gt;. This flag does the same as &lt;strong&gt;”–save-dev”&lt;/strong&gt;, but is just a shorthand. A nice little knowledge-bomb.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;global-or--g&quot;&gt;–global or -g&lt;/h2&gt;
&lt;p&gt;These flags will install the package to the global scope. What does that mean?&lt;/p&gt;

&lt;p&gt;Let us take Gulp.js as an example. For you to use Gulp commands in your “Command Prompt” or “Terminal”, you would just type:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;gulp “taskname”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But, if you haven’t installed Gulp globally, the &lt;strong&gt;“Gulp”&lt;/strong&gt; keyword, won’t be recognised, and therefore, you can’t use it. You &lt;em&gt;CAN&lt;/em&gt; however do this, if you have installed Gulp.js globally to your computer:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm install gulp –global&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, the gulp keyword can be recognised, and you can run a task in your project, whenever it pleases you. This also applies to webpack and &lt;em&gt;MANY&lt;/em&gt; other packages.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bonus-install-or-i&quot;&gt;Bonus: install or i&lt;/h2&gt;
&lt;p&gt;People use different syntaxes when writing their documentation for how you should install their package. Some will write:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm install gulp –save-dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And others will write:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm i gulp –save-dev&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;strong&gt;“install”&lt;/strong&gt; and &lt;strong&gt;“i”&lt;/strong&gt; keyword, does the same. No difference. This is just another one of those nifty shorthands to use.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;check-for-updates&quot;&gt;Check for updates&lt;/h1&gt;
&lt;p&gt;Sometimes, a package developer releases a new version of a package. It could be a major update. Maybe a minor update. Or even an update that no one notices because it’s a bugfix-update. It matters not for you, because in a moment, you will be armed with the knowledge of how to check for and update the… updates, that might or might not appear. This is all you have to do:&lt;/p&gt;

&lt;p&gt;In the root of your project, where your package.json file is, open a command line and type the following:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm outdated&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s it! After a short while, it should list all of the packages with an update available, and some verison information:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/packages-and-their-updates.png&quot; title=&quot;Screenshot of the list of package updates&quot; alt=&quot;Screenshot of the list of package updates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, if you are fine with the changes that is coming, all you have to do, is type:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;npm update&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/packages-after-update.png&quot; title=&quot;Screenshot after the updated process&quot; alt=&quot;Screenshot after the updated process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should start the update process, and that’s it. You have successfully updated the packages of your application.&lt;/p&gt;

&lt;h3 id=&quot;protip-its-a-good-idea-to-commit-your-application-to-your-version-control-before-for-a-easy-way-back-if-one-of-the-packages-comes-with-a-unforseen-bug&quot;&gt;Protip: It’s a good idea to commit your application to your version control before, for a easy way back IF one of the packages comes with a unforseen bug.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;Hopefully, you have a better understanding of how the flags work now. In the beginning, it’s going to take some getting used to, always considering if you should use the &lt;strong&gt;”–save-dev”&lt;/strong&gt; or the &lt;strong&gt;”–save”&lt;/strong&gt; flag, and whether to use the shorthand or not.&lt;/p&gt;

&lt;p&gt;Next time, I will write about how NPM and Gulp.js works together, how to setup a build-system to compile SASS (SCSS) and hopefully get you interested in getting comfortable with using SASS (SCSS) instead of regular CSS.&lt;/p&gt;

&lt;p&gt;As always, I would always like to know what you thought about the post, so shoot me a DM on my &lt;a href=&quot;&amp;quot;https://twitter.com/jebkor_&amp;quot;&quot;&gt;Twitter&lt;/a&gt; and let me know.&lt;/p&gt;

&lt;p&gt;Take care&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome back. I hope you gained a little bit of insight from my last blog post. I thought it would be a great place to start for people to either brush up on old knowledge or gain new knowledge.</summary></entry><entry><title type="html">Journey to use NPM in your projects. Part One - Installing and using NPM</title><link href="/2017/12/03/journey-to-use-npm-part-one.html" rel="alternate" type="text/html" title="Journey to use NPM in your projects. Part One - Installing and using NPM" /><published>2017-12-03T00:00:00+01:00</published><updated>2017-12-03T00:00:00+01:00</updated><id>/2017/12/03/journey-to-use-npm-part-one</id><content type="html" xml:base="/2017/12/03/journey-to-use-npm-part-one.html">&lt;p&gt;Why hello there.&lt;/p&gt;

&lt;p&gt;My first real blog post. How exciting! And this blog post will be the first of, likely, many to teach &lt;em&gt;you&lt;/em&gt; about NPM and how you can use it in &lt;em&gt;your&lt;/em&gt; projects. If you’ve always wanted the ‘a-ha’ moment, when trying to figure out NPM, hopefully this journey will help you get there. Hopefully I can lift the veil and show you the ways of NPM.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-npm&quot;&gt;What is NPM?&lt;/h2&gt;
&lt;p&gt;NPM, or &lt;em&gt;Node Package Manager&lt;/em&gt;, is as the name implies, a manager for packages used with/for Node.js. Packages can be a lot of different things: A CSS framework, a javascript framework or bits and pieces of reusable code you want to use in your projects.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-would-i-use-npm&quot;&gt;Why would I use NPM?&lt;/h2&gt;
&lt;p&gt;If you want to do everything the round-about and tough way, go ahead: rely on CDN’s or zip-downloaded files to use some library or chunk of code. If you, on the other hand would like to do everything the ‘short’ and easy way, use NPM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; To use NPM packages to their fullest, it’s recommended that you look into build-systems or bundlers. If you know nothing about them, I will have a piece on it at a later date, but it could be worth checking out &lt;a href=&quot;https://gulpjs.com&quot;&gt;Gulp.js&lt;/a&gt; or &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With build-systems or bundlers, you can just include the package in your code, and when the code compiles, the package will be included on your website/in your application, without the need to rely on CDN’s to be up and running, or local files to exist. Neat, right?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;okay-youve-sold-me-how-do-i-get-npm&quot;&gt;Okay, you’ve sold me. How do I get NPM?&lt;/h2&gt;
&lt;p&gt;To be able to use NPM on your machine, you need to install Node.js. Node.js, if you don’t know, &lt;em&gt;Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine.&lt;/em&gt; - 
&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install Node.js, head to the webpage, and download the &lt;em&gt;recommended&lt;/em&gt; version (as of writing this, it’s 8.9.1 LTS). The &lt;em&gt;latest features&lt;/em&gt; version, is the most bleeding and cutting edge version, and are more likely to contain bugs that can impede your workflow, or stop NPM from working. In most cases, download the recommended version.&lt;/p&gt;

&lt;p&gt;You can check if you’ve successfully installed Node.js by opening a CMD or Terminal window, and type:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;node -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A version number should now appear. Congrats! You’ve successfully installed Node.js&lt;/p&gt;

&lt;p&gt;Next, is to install NPM. You can do this by typing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install npm@latest -g&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install the latest, stable version of NPM. the &lt;em&gt;-g&lt;/em&gt;, or &lt;em&gt;-global&lt;/em&gt; flag, means NPM will be installed globally, so the NPM keyword can be accessed anywhere on your computer. Other flags are available, and we will explore these later.&lt;/p&gt;

&lt;p&gt;To check if NPM is installed correctly, simply type the following in a CMD window:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A version number should appear, and that means you have successfully installed NPM. Way to go!
Now you should be ready to get started with NPM. Go explore some packages!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dont-leave-me-yet-jesper&quot;&gt;Don’t leave me yet, Jesper!&lt;/h2&gt;
&lt;p&gt;What, you want and example of usage as well? Fine, I’ll show you, how use your packages in the simplest yet worst way possible, just to get you started.&lt;/p&gt;

&lt;p&gt;Say you wanted to use the framework Moment.js to handle all kinds of dates, all you need to do is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;npm install moment –save&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install Moment.js as a dependency to your application, and download the files to a &lt;em&gt;node_modules&lt;/em&gt; folder in your project root. Don’t worry, I will show the flow of installation as well as usage with Gulp.js next time.&lt;/p&gt;

&lt;p&gt;Next what you can do, which I &lt;strong&gt;highly&lt;/strong&gt; suggest &lt;strong&gt;not&lt;/strong&gt; doing, is link the node_modules file directly as a script:&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./node_modules/moment/dist/moment.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//or whatever the path is&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I don’t want you to do this, because when your application hits production, the &lt;em&gt;node_modules&lt;/em&gt; folder won’t exist on the server. Or rather, it shouldn’t exist on the server. This is why you would want a build-system or bundler to handle the compilation, where Moment.js is included.&lt;/p&gt;

&lt;p&gt;As my final demonstration, because I’ve already talked for a &lt;em&gt;loooong&lt;/em&gt; while, this is how a file, that is compiled using Gulp.js and Babel, could look like:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Moment&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'moment'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//import the moment library&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Moment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'MMMM Do YYYY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// December 3rd 2017&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That’s it!. When the javascript file is compiled and the &lt;em&gt;bundles/built&lt;/em&gt; file is included on your page, the output should show the current date in a console.log.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;
&lt;p&gt;This is the end of Part One of the &lt;em&gt;Journey to use NPM in your project. Part One - Installing and using NPM&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;My next post, will be explaining how to setup a simple Gulp.js project to compile Javascript files, explaining the –save and –save-dev flags in NPM and when to use either –save or –save-dev.&lt;/p&gt;

&lt;p&gt;Untill then, keep it frosty! ⛄&lt;/p&gt;</content><author><name></name></author><summary type="html">Why hello there.</summary></entry><entry><title type="html">Hello World!</title><link href="/2017/11/13/Hello-World.html" rel="alternate" type="text/html" title="Hello World!" /><published>2017-11-13T00:00:00+01:00</published><updated>2017-11-13T00:00:00+01:00</updated><id>/2017/11/13/Hello-World</id><content type="html" xml:base="/2017/11/13/Hello-World.html">&lt;p&gt;Hello, and welcome to my humble blog. I will use this medium for guides, thoughts, ideas and inspiration, and I hope someone will find it useful.&lt;/p&gt;

&lt;p&gt;If you like what I write about, don’t be free to shoot me a DM on twitter or whereever you can find me. I would like to know if someone finds my stuff interesting.&lt;/p&gt;

&lt;p&gt;With that said, I am excited to get started with writing and stuff.&lt;/p&gt;

&lt;p&gt;I will see you guys later.&lt;/p&gt;

&lt;p&gt;/Jesper&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello, and welcome to my humble blog. I will use this medium for guides, thoughts, ideas and inspiration, and I hope someone will find it useful.</summary></entry></feed>